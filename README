Rube

A superset of Redis.

The aim of this project is to add a simple stack-based assembly language onto the redis server.
Instead of integer and float registers, we also have string list hash regexp reference stack and queue.
In addition, we support a small set of concise commands that can manipulate these datatypes and, in turn,
could be used to build larger commands.

If the underlying language is robust enough, one should be able to implement the entire ruby feature set.
But I don't recommend it - relying solely on your Ruby skills when the underlying "machine" architecture is fundamentally
different would be doing a disservice to the underlying Redis data structures.

Implementation Ideas
--------------------
Push the entire set of commands onto the stack in reverse order and then eval the stack as if each item was
an incoming token from the client.
This allows commands to manipulate or insert any of the future commands (kinda like forth).
In fact, it could easily be considered to be a layer on top of forth to make it appear to be more procedural
than it really is.

Rube-related data stored in Redis will be prefixed with "rube::" to namespace it from standard Redis data.
The 0x0d0a signalling an EOL will be pushed on the stack along with the rest of the code/data,
to give context to the commands below.

Additional Commands
-------------------
  push <value>
  pop
  pop_until <token>
  pop_until_eol
  <name>= <value>
  compare <value> <comparator> <value>
  alias <new_name> <old_name>
  <location>= <value>
  method_missing  #
  eval_after_reboot  #  the code to run on the next reboot
  eval <stack> # begins a transaction
  store_until <token>  #
  def  # begins a transaction
  begin  # begins a transaction
  if  #  starts a conditional transaction
  end  #  closes a transaction
  ignore_until <token>  #
  ignore_until_eol
  = <src_location> <dest_location>
  +
  <value>  #  any basic redis object: int string list hash regexp reference
  @<reference>  #  string at a named location contains the name of the real location
  <location  #  either an @reference of the name of


== WORK == IN == PROGRESS ==

Implemented in C
----------------
These commands will be written in C, alongside the existing C-based redis commands:
  ignore_until
  eval_until
  def

Implemented in Rube
-------------------
def ignore_until_eol
  ignore_until 0x0d0a
end

alias # ignore_until_eol

push
  




Future Thoughts
---------------
- Once written, some of the existing Redis entry points could be rewritten in this assembly language
- It would essentially be an addition to the existing Redis language, but would eventually supplant it
when its consistency and simplicity won out over the old Redis.




ORIGINAL REDIS README STARTS BELOW HERE (DUNNO IF NEEDED)
---------------------------------------------------------

Where to find complete Redis documentation?
-------------------------------------------

This README is just a fast "quick start" document. You can find more detailed
documentation at http://redis.io

Building Redis
--------------

It is as simple as:

    % make

You can run a 32 bit Redis binary using:

    % make 32bit

After building Redis is a good idea to test it, using:

    % make test

NOTE: if after building Redis with a 32 bit target you need to rebuild it
      with a 64 bit target you need to perform a "make clean" in the root
      directory of the Redis distribution.

Allocator
---------

Selecting a non-default memory allocator when building Redis is done by setting
the `MALLOC` environment variable. Redis is compiled and linked against libc
malloc by default, with the exception of jemalloc being the default on Linux
systems. This default was picked because jemalloc has proven to have fewer
fragmentation problems than libc malloc.

To force compiling against libc malloc, use:

    % make MALLOC=libc

To compile against jemalloc on Mac OS X systems, use:

    % make MALLOC=jemalloc

Verbose build
-------------

Redis will build with a user friendly colorized output by default.
If you want to see a more verbose output use the following:

    % make V=1

Running Redis
-------------

To run Redis with the default configuration just type:

    % cd src
    % ./redis-server
    
If you want to provide your redis.conf, you have to run it using an additional
parameter (the path of the configuration file):

    % cd src
    % ./redis-server /path/to/redis.conf

It is possible to alter the Redis configuration passing parameters directly
as options using the command line. Examples:

    % ./redis-server --port 9999 --slaveof 127.0.0.1 6379
    % ./redis-server /etc/redis/6379.conf --loglevel debug

All the options in redis.conf are also supported as options using the command
line, with exactly the same name.

Playing with Redis
------------------

You can use redis-cli to play with Redis. Start a redis-server instance,
then in another terminal try the following:

    % cd src
    % ./redis-cli
    redis> ping
    PONG
    redis> set foo bar
    OK
    redis> get foo
    "bar"
    redis> incr mycounter
    (integer) 1
    redis> incr mycounter
    (integer) 2
    redis> 

You can find the list of all the available commands here:

    http://redis.io/commands

Installing Redis
-----------------

In order to install Redis binaries into /usr/local/bin just use:

    % make install

You can use "make PREFIX=/some/other/directory install" if you wish to use a
different destination.

Make install will just install binaries in your system, but will not configure
init scripts and configuration files in the appropriate place. This is not
needed if you want just to play a bit with Redis, but if you are installing
it the proper way for a production system, we have a script doing this
for Ubuntu and Debian systems:

    % cd utils
    % ./install_server

The script will ask you a few questions and will setup everything you need
to run Redis properly as a background daemon that will start again on
system reboots.

You'll be able to stop and start Redis using the script named
/etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379.

Enjoy!
